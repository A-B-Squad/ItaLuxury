generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

enum PaymentMethod {
  CREDIT_CARD
  CASH_ON_DELIVERY
}

enum Status {
  REFUNDED
  BACK
  CANCELLED
  CONFIRMED
  TRANSFER_TO_DELIVERY_COMPANY
  PROCESSING
  PAYMENT_REFUSED
  PAYED_AND_DELIVERED
  PAYED_NOT_DELIVERED
}

enum Cause {
  BROKEN
  CANCEL
  REFUND
}

enum PointType {
  EARNED // Points earned from purchases (5% of total)
  EXPIRED // Points that have expired
  ADJUSTMENT // Manual adjustments
  ADMIN_ADDED // Points manually added by admin
}

model User {
  id                String             @id @default(uuid())
  fullName          String
  email             String             @unique
  password          String
  role              Role
  number            String
  points            Int                @default(0)
  baskets           Basket[]
  reviews           Review[]
  favoriteProducts  FavoriteProducts[]
  checkout          Checkout[]
  ContactUs         ContactUs[]
  pointTransactions PointTransaction[]
  Voucher           Voucher[]
}

model Admin {
  id       String  @id @default(uuid())
  fullName String
  email    String? @unique
  password String
  role     Role
  number   String?
}

model Category {
  id            String      @id @default(uuid())
  name          String      @unique
  parent        Category?   @relation("Subcategories", fields: [parentId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  parentId      String? // ID of the parent category
  products      Product[] // Products associated with this category
  subcategories Category[]  @relation("Subcategories") // One-to-Many self-relation
  bigImage      String?
  smallImage    String?
  description   String?
  BestSales     BestSales[]
}

model Product {
  id                    String               @id @default(uuid())
  name                  String
  price                 Float                @default(0)
  purchasePrice         Float                @default(0)
  isVisible             Boolean              @default(true)
  reference             String
  description           String
  technicalDetails      String?
  inventory             Int                  @default(0)
  solde                 Int                  @default(0)
  broken                Int                  @default(0)
  images                String[]
  categories            Category[]
  productDiscounts      ProductDiscount[]
  baskets               Basket[]
  reviews               Review[]
  favoriteProducts      FavoriteProducts[]
  ProductInCheckout     ProductInCheckout[]
  Colors                Colors?              @relation(fields: [colorsId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  colorsId              String?
  TopDeals              TopDeals?
  BestSales             BestSales[]
  Brand                 Brand?               @relation(fields: [brandId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  brandId               String?
  BreakedProduct        BreakedProduct[]
  createdAt             DateTime             @default(now())
  updatedAt             DateTime?            @updatedAt
  GroupProductVariant   GroupProductVariant? @relation(fields: [groupProductVariantId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  groupProductVariantId String?
}

model GroupProductVariant {
  id               String    @id @default(uuid())
  groupProductName String    @unique
  Products         Product[]
}

model BestSales {
  id         String    @id @default(uuid())
  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?
  Product    Product?  @relation(fields: [productId], references: [id])
  productId  String?
}

model Colors {
  id      String    @id @default(uuid())
  color   String    @unique
  Hex     String    @unique
  Product Product[]
}

model TopDeals {
  id        String   @id @default(uuid())
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId String?  @unique
}

model ProductDiscount {
  id          String   @id @default(uuid())
  product     Product? @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId   String?  @unique
  price       Float
  newPrice    Float
  dateOfStart DateTime
  dateOfEnd   DateTime
}

model Basket {
  id        String   @id @default(uuid())
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String?
  quantity  Int
  Product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId String
}

model Checkout {
  id                String              @id @default(uuid())
  userName          String
  User              User?               @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId            String?
  Governorate       Governorate?        @relation(fields: [governorateId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  governorateId     String?
  productInCheckout ProductInCheckout[]
  manualDiscount    Float               @default(0)
  phone             String[]
  address           String
  package           Package[]
  total             Float
  pointsEarned      Int?                @default(0)
  pointsUsed        Int?                @default(0)
  createdAt         DateTime            @default(now())
  Coupons           Coupons?            @relation(fields: [couponsId], references: [id])
  couponsId         String?
  freeDelivery      Boolean             @default(false)
  isGuest           Boolean             @default(false)
  guestEmail        String?
  deliveryComment   String?
  paymentMethod     PaymentMethod
  pointTransactions PointTransaction[]
  Voucher           Voucher[]
}

model ApiCredentials {
  id                 String   @id @default(uuid())
  api_id             String
  access_token       String
  createdAt          DateTime @default(now())
  integrationFor     String
  domainVerification String?
}

model ProductInCheckout {
  id              String   @id @default(uuid())
  checkout        Checkout @relation(fields: [checkoutId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  checkoutId      String
  product         Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId       String
  productQuantity Int
  price           Float
  discountedPrice Float    @default(0)
}

model Package {
  id                String    @id @default(uuid())
  customId          String    @unique
  Checkout          Checkout  @relation(fields: [checkoutId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  checkoutId        String
  status            Status
  createdAt         DateTime  @default(now())
  delivredAt        DateTime?
  inTransitAt       DateTime?
  isConfirmedAt     DateTime?
  returnedAt        DateTime?
  comments          String[]
  deliveryReference String?
}

model BreakedProduct {
  id        String   @id @default(uuid())
  cause     String   @default("BROKEN")
  createdAt DateTime @default(now())
  quantity  Int      @default(0)
  Product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
}

model Review {
  id        String   @id @default(uuid())
  rating    Float
  comment   String?
  userName  String?
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String?
  createdAt DateTime @default(now())
}

model FavoriteProducts {
  id        String   @id @default(uuid())
  userId    String?
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId String?
  Product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Advertisement {
  id       String   @id @default(uuid())
  images   String[]
  position String
  link     String?
}

model Governorate {
  id       String     @id @default(uuid())
  name     String
  checkout Checkout[]
}

model CompanyInfo {
  id              String   @id @default(uuid())
  phone           String[]
  deliveringPrice Int
  logo            String
  instagram       String
  facebook        String
  location        String
  email           String
}

model content_visibility {
  id                String  @id @default(uuid())
  section           String
  visibility_status Boolean
}

model Brand {
  id      String    @id @default(uuid())
  name    String
  logo    String
  product Product[]
}

model ContactUs {
  id        String   @id @default(uuid())
  subject   String
  email     String
  document  String?
  message   String
  createdAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model Coupons {
  id        String     @id @default(uuid())
  code      String
  discount  Float      @default(0)
  available Boolean    @default(true)
  checkout  Checkout[]
}

model PointTransaction {
  id          String    @id @default(uuid())
  amount      Int
  type        PointType
  description String?
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  checkout    Checkout? @relation(fields: [checkoutId], references: [id], onDelete: SetNull)
  checkoutId  String?
}

model Voucher {
  id         String    @id @default(uuid())
  code       String    @unique
  amount     Float     @default(100.0) // 100 TND voucher
  isUsed     Boolean   @default(false)
  createdAt  DateTime  @default(now())
  expiresAt  DateTime
  usedAt     DateTime?
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  checkout   Checkout? @relation(fields: [checkoutId], references: [id])
  checkoutId String?
}

model PointSetting {
  id                 String   @id @default(uuid())
  conversionRate     Float    @default(0.05) // 5% of purchase amount as points
  redemptionRate     Float    @default(0.01) // Value of 1 point in TND
  minimumPointsToUse Int      @default(100) // Minimum points required for redemption
  loyaltyThreshold   Int      @default(10000) // Points needed for loyalty reward
  loyaltyRewardValue Float    @default(100.0) // Value of loyalty reward in TND
  isActive           Boolean  @default(true)
  updatedAt          DateTime @updatedAt
}
