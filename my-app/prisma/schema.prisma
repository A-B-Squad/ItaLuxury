generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

enum PaymentMethod {
  CREDIT_CARD
  CASH_ON_DELIVERY
}

enum Status {
  REFUNDED
  BACK
  CANCELLED
  CONFIRMED
  TRANSFER_TO_DELIVERY_COMPANY
  PROCESSING
  PAYMENT_REFUSED
  PAYED_AND_DELIVERED
  PAYED_NOT_DELIVERED
}

enum Cause {
  BROKEN
  CANCEL
  REFUND
}

model User {
  id               String             @id @default(uuid())
  fullName         String
  email            String             @unique
  password         String
  role             Role
  number           String
  baskets          Basket[]
  reviews          Review[]
  favoriteProducts FavoriteProducts[]
  checkout         Checkout[]
  ContactUs        ContactUs[]
}

model Admin {
  id       String  @id @default(uuid())
  fullName String
  email    String? @unique
  password String
  role     Role
  number   String?
}

model Category {
  id            String      @id @default(uuid())
  name          String      @unique
  parent        Category?   @relation("Subcategories", fields: [parentId], references: [id], onDelete: Cascade)
  parentId      String? // ID of the parent category
  products      Product[] // Products associated with this category
  subcategories Category[]  @relation("Subcategories") // One-to-Many self-relation
  bigImage      String?
  smallImage    String?
  description   String?
  BestSales     BestSales[]
}

model Product {
  id                String              @id @default(uuid())
  name              String
  price             Float               @default(0)
  purchasePrice     Float               @default(0)
  isVisible         Boolean             @default(true)
  reference         String
  description       String
  technicalDetails  String?
  inventory         Int                 @default(0)
  solde             Int                 @default(0)
  broken            Int                 @default(0)
  images            String[]
  createdAt         DateTime            @default(now())
  categories        Category[]
  productDiscounts  ProductDiscount[]
  baskets           Basket[]
  reviews           Review[]
  favoriteProducts  FavoriteProducts[]
  ProductInCheckout ProductInCheckout[]
  Colors            Colors?             @relation(fields: [colorsId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  colorsId          String?
  TopDeals          TopDeals?
  BestSales         BestSales[]
  Brand             Brand?              @relation(fields: [brandId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  brandId           String?
  BreakedProduct    BreakedProduct[]
}

model BestSales {
  id         String    @id @default(uuid())
  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?
  Product    Product?  @relation(fields: [productId], references: [id])
  productId  String?
}

model Colors {
  id      String    @id @default(uuid())
  color   String    @unique
  Hex     String    @unique
  Product Product[]
}

model TopDeals {
  id        String   @id @default(uuid())
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId String?  @unique
}

model ProductDiscount {
  id          String   @id @default(uuid())
  product     Product? @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId   String?  @unique
  price       Float
  newPrice    Float
  dateOfStart DateTime
  dateOfEnd   DateTime
}

model Basket {
  id        String   @id @default(uuid())
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String?
  quantity  Int
  Product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId String
}

model Checkout {
  id                String              @id @default(uuid())
  userName          String
  User              User?               @relation(fields: [userId], references: [id])
  userId            String?
  Governorate       Governorate?        @relation(fields: [governorateId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  governorateId     String?
  productInCheckout ProductInCheckout[]
  manualDiscount    Float               @default(0)
  phone             String[]
  address           String
  package           Package[]
  total             Float
  createdAt         DateTime            @default(now())
  Coupons           Coupons?            @relation(fields: [couponsId], references: [id])
  couponsId         String?
  freeDelivery      Boolean             @default(false)
  isGuest           Boolean             @default(false)
  guestEmail        String?
  deliveryComment   String?
  paymentMethod     PaymentMethod
}

model ApiCredentials {
  id                 String   @id @default(uuid())
  api_id             String
  access_token       String
  createdAt          DateTime @default(now())
  integrationFor     String
  domainVerification String?
}

model ProductInCheckout {
  id              String   @id @default(uuid())
  checkout        Checkout @relation(fields: [checkoutId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  checkoutId      String
  product         Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId       String
  productQuantity Int
  price           Float
  discountedPrice Float    @default(0)
}

model Package {
  id                String    @id @default(uuid())
  customId          String    @unique
  Checkout          Checkout  @relation(fields: [checkoutId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  checkoutId        String
  status            Status
  createdAt         DateTime  @default(now())
  delivredAt        DateTime?
  inTransitAt       DateTime?
  isConfirmedAt     DateTime?
  returnedAt        DateTime?
  comments          String[]
  deliveryReference String?
}

model BreakedProduct {
  id        String   @id @default(uuid())
  cause     String   @default("BROKEN")
  createdAt DateTime @default(now())
  quantity  Int      @default(0)
  Product   Product? @relation(fields: [productId], references: [id])
  productId String
}

model Review {
  id        String   @id @default(uuid())
  rating    Float
  comment   String?
  userName  String?
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId String?
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
}

model FavoriteProducts {
  id        String   @id @default(uuid())
  userId    String?
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId String?
  Product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Advertisement {
  id       String   @id @default(uuid())
  images   String[]
  position String
  link     String?
}

model Governorate {
  id       String     @id @default(uuid())
  name     String
  checkout Checkout[]
}

model CompanyInfo {
  id              String   @id @default(uuid())
  phone           String[]
  deliveringPrice Int
  logo            String
  instagram       String
  facebook        String
  location        String
  email           String
}

model content_visibility {
  id                String  @id @default(uuid())
  section           String
  visibility_status Boolean
}

model Brand {
  id      String    @id @default(uuid())
  name    String
  logo    String
  product Product[]
}

model ContactUs {
  id        String   @id @default(uuid())
  subject   String
  email     String
  document  String?
  message   String
  createdAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model Coupons {
  id        String     @id @default(uuid())
  code      String
  discount  Float      @default(0)
  available Boolean    @default(true)
  checkout  Checkout[]
}
