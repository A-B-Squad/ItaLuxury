generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id               String             @id @default(uuid())
  fullName         String
  email            String             @unique
  password         String
  role             Role
  number           String
  baskets          Basket[]
  reviews          Review[]
  favoriteProducts FavoriteProducts[]
}

model Category {
  id            String     @id @default(uuid())
  name          String     @unique
  parent        Category?  @relation("Subcategories", fields: [parentId], references: [id])
  parentId      String? // ID of the parent category
  products      Product[] // Products associated with this category
  subcategories Category[] @relation("Subcategories") // One-to-Many self-relation
}

model Product {
  id               String             @id @default(uuid())
  name             String             @unique
  price            Float
  isVisible        Boolean            @default(true)
  reference        String
  description      String
  inventory        Int
  solde            Int                @default(0)
  images           String[]
  createdAt        DateTime           @default(now())
  categories       Category[]
  productDiscounts ProductDiscount[]
  baskets          Basket[]
  reviews          Review[]
  favoriteProducts FavoriteProducts[]
  attributes       ProductAttribute[]
  Colors           Colors?            @relation(fields: [colorsId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  colorsId         String?
  Supplier         Supplier?          @relation(fields: [supplierId], references: [id])
  supplierId       String?
}

model Colors {
  id       String    @id @default(uuid())
  color    String    @unique
  products Product[]
}

model Discount {
  id               String            @id @default(uuid())
  percentage       Int
  productDiscounts ProductDiscount[]
}

model ProductDiscount {
  id          String    @id @default(uuid())
  Discount    Discount? @relation(fields: [discountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  discountId  String?
  product     Product?  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId   String?
  price       Float
  newPrice    Float
  dateOfStart DateTime
  dateOfEnd   DateTime
}

model Basket {
  id        String     @id @default(uuid())
  userId    String?
  User      User?      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  checkout  Checkout[]
  Product   Product?   @relation(fields: [productId], references: [id])
  productId String?
}

model Checkout {
  id        String   @id @default(uuid())
  basketId  String?
  basket    Basket?  @relation(fields: [basketId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  status    String
  createdAt DateTime @default(now())
}

model Review {
  id        String   @id @default(uuid())
  rating    Float
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId String?
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model FavoriteProducts {
  id        String   @id @default(uuid())
  userId    String?
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId String?
  Product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model ProductAttribute {
  id        String   @id @default(uuid())
  name      String
  value     String
  productId String?
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Advertisement {
  id       String @id @default(uuid())
  image    String
  position String
}

model Supplier {
  id      String    @id @default(uuid())
  name    String
  product Product[]
}
