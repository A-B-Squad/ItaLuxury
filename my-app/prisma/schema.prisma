generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

enum Status {
  PENDING
  BACK
  EXCHANGE
  DELIVERED
}

model User {
  id               String             @id @default(uuid())
  fullName         String
  email            String             @unique
  password         String
  role             Role
  number           String
  baskets          Basket[]
  reviews          Review[]
  favoriteProducts FavoriteProducts[]
  checkout         Checkout[]
}

model Category {
  id            String     @id @default(uuid())
  name          String     @unique
  parent        Category?  @relation("Subcategories", fields: [parentId], references: [id], onDelete: Cascade)
  parentId      String? // ID of the parent category
  products      Product[] // Products associated with this category
  subcategories Category[] @relation("Subcategories") // One-to-Many self-relation
}

model Product {
  id               String             @id @default(uuid())
  name             String             @unique
  price            Float
  isVisible        Boolean            @default(true)
  reference        String
  description      String
  inventory        Int
  solde            Int                @default(0)
  images           String[]
  createdAt        DateTime           @default(now())
  categories       Category[]
  productDiscounts ProductDiscount[]
  baskets          Basket[]
  reviews          Review[]
  favoriteProducts FavoriteProducts[]
  attributes       ProductAttribute[]
  Colors           Colors?            @relation(fields: [colorsId], references: [id], onDelete: Cascade)
  colorsId         String?
}

model Colors {
  id       String    @id @default(uuid())
  color    String    @unique
  Hex      String
  products Product[]
}

model Discount {
  id               String            @id @default(uuid())
  percentage       Int
  productDiscounts ProductDiscount[]
}

model ProductDiscount {
  id          String    @id @default(uuid())
  Discount    Discount? @relation(fields: [discountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  discountId  String?
  product     Product?  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId   String?   @unique
  price       Float
  newPrice    Float
  dateOfStart DateTime
  dateOfEnd   DateTime
}

model Basket {
  id        String   @id @default(uuid())
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String?
  quantity  Int
  Product   Product? @relation(fields: [productId], references: [id])
  productId String   @unique
}

model Checkout {
  id            String       @id @default(uuid())
  User          User?        @relation(fields: [userId], references: [id])
  userId        String?
  Governorate   Governorate? @relation(fields: [governorateId], references: [id])
  governorateId String?
  productIds    String[]
  phone         Int[]
  address       String
  package       Package[]
  total         Int
  createdAt     DateTime     @default(now())
}

model Package {
  id         String    @id @default(uuid())
  Checkout   Checkout? @relation(fields: [checkoutId], references: [id])
  checkoutId String?
  status     Status
  createdAt  DateTime  @default(now())
}

model Review {
  id        String   @id @default(uuid())
  rating    Float
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId String?
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model FavoriteProducts {
  id        String   @id @default(uuid())
  userId    String?
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId String?
  Product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model ProductAttribute {
  id        String   @id @default(uuid())
  name      String
  value     String
  productId String?
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Advertisement {
  id       String   @id @default(uuid())
  images   String[]
  position String
}

model Governorate {
  id       String     @id @default(uuid())
  name     String
  checkout Checkout[]
}

model CompanyInfo {
  id              String @id @default(uuid())
  phone           Int[]
  deliveringPrice Int
  logo            String
}
